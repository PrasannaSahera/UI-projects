1. What is the difference between var, let and const?
    All are used to define the variable.
    var is a function scoped variable which can be reassigned and redeclared. It can used before declaration.
    let and const cannot be redeclared and cannot be used before declaration. These are block scoped variables.
    let can be reassigned but const cannot be reassigned.

2. Guess the o/p
    const x=10;
    const y=20;
    const z = '30';
    console.log(x+y+z); //3030

3. Guess the o/p
    console.log(x); //undefined
    var x=30;

4. In JS, it is possible to use the value before declaration it is called as Hoisting.

5. Guess the o/p
    let x=20;
    let z = ++x + x++ + --x; // 21 + 21 + 21 = 63
    console.log(z-x); // 63-21 = 42

6. Guess the o/p
    let x=5;
    if(x=10)
    {
        console.log("Good");
    }
    else
    {
        console.log("bad");
    }
Ans : Good bcz in if assigning is done which is always true. 

7. write a simple code to print following pattern
1
1 2
1 2 3
1 2 3 4
1 2 3 4 5

let pattern="";
for(let i=1;i<=5;i++)
{    
    for(let j=1;j<=i;j++)
    {
        pattern += " " + j;
    }
    pattern += "\n";
}
console.log(pattern);

8. Guess the o/p

let x=2;
switch(x)
{
    case 2: console.log("I'm 2"); break;
    case 2: console.log("I'm not 2"); break;
    default:
       console.log("error");
}

Ans: I'm 2. if first one True it will not go for next case.

9. Guess the o/p
let x=2;
if(x>3)
    if(x<5)
        console.log("Good");
    else 
        console.log("not good");
Ans: Nothing

10. Write a simple code to print the following code.

11. Guess the o/p

    if(0==false)
    {
        console.log("Good");
    }
    else{
        console.log("bad");
    }

Ans : Good

12. Guess the o/p

let x= 5, y='raj';
console.log(5-'raj'); // NaN -Not a Number
console.log(typeof( x-y)); // number (NaN is one type of a number)

13. find the 2nd heighest value in given array
let arr =[5,4,8,2,1];
fh = 0, sh = 0;
for(i=0;i<=arr.length;i++)
{
    if (arr[i] > fh) {
        sh = fh;
        fh = arr[i];
    } else if (arr[i] > sh && arr[i] < fh) {
        sh = arr[i];
    } 
}
console.log(fh, sh);